<template>
  <view class="audio-controler row" @tap="goDetail"> 
    <progress class="progress"
              percent="{{100 * audioData.current / audioData.duration}}" 
              stroke-width="1" 
              backgroundColor="#D2D2D2"
              activeColor="#000000"/>
    <!--左边栏-->
    <view class="left-bar row-around">
      <view class="icon-close column-center" wx:if="{{audioData.paused}}">
        <i class="iconfont iconfont-close"></i>
      </view>
      <image class="goods-image"  lazy-load src="{{audioData.coverImgUrl}}" ></image>
      <view class="column" style="width:{{paused ? '386rpx' : '442rpx'}}">
        <text class="nm strong line1 ">{{audioData.title}}</text>
        <text class="xs week line1">{{durationTime}}</text>
      </view>
    </view>
    <!--右边栏-->
    <view class="right-bar row-around">
      <view class="icon-play column-center" @tap.stop="pauseOrplay">
        <i class="iconfont {{audioData.paused ? 'iconfont-play' : 'iconfont-stop'}}"></i>
      </view>
      <view class="icon-next column-center">
        <i class="iconfont iconfont-next"></i>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import play from '../../api/play';
  export default class AudioWidget extends wepy.component {
    props = {}
    data = {
      audioData: {
        current: 0,
        duration: 0
      }
    }
    async onLoad() {}
    /**
     * 初始化播放器
     */
    audioInit() {
      this.audioData = wepy.$instance.globalData.audioData;
      this.bgAudio = wepy.getBackgroundAudioManager();
      this.$apply();
      this.bgAudio.onTimeUpdate(res => {
        this.audioData.current = Math.ceil(this.bgAudio.currentTime)
        this.$apply()
      });
      this.bgAudio.onEnded(res => {
        console.log('end')
      })
    }
    methods = {
      pauseOrplay() {
        this.audioData.paused ? this.bgAudio.play() : this.bgAudio.pause();
        this.audioData.paused = !this.audioData.paused;
      },
      goDetail() {
       this.$root.$navigate('/pages/play/audio_detail')
      }
    };
    computed = {
      currentTime() {
        return play.fmtTime(this.audioData.current);
      },
      durationTime() {
        return play.fmtTime(this.audioData.duration);
      }
    }
    mixins = []
    events = {}
    components = {}
  }

</script>

<style lang="less">
  @import "../../styles/variable";
  // 播放详情页
  @keyframes showPage {
    0% {
      top: 200%;
    }
    100% {
      top: 0;
    }
  }
  @keyframes hidePage {
    0% {
      top: 0;
    }
    100% {
      top: 200%;
    }
  }
  .show-page {
    animation: showPage 1s forwards;
  }
  .hide-page{
    animation: hidePage 1s forwards;
  }
  
  // 播放控制栏
  .audio-controler{
    @size: 114rpx;
    width: 750rpx;
    height: 110rpx;
    background: white;
    position: fixed;
    left: 0;
    bottom: 0;
    height: @size;
    z-index: 20;
    .left-bar{
      width: 550rpx;
      height: @size;
      .icon-close{
        width: 46rpx;
        height: 46rpx;
        .iconfont{
          color: #808080;
          font-size: 46rpx;
        }
      }
      .goods-image {
        width: 68rpx;
        height: 88rpx;
        border-radius: 8rpx;
      }
    }
    .right-bar{
      width: 200rpx;
      height: @size;
      .icon-play{
        width: 60rpx;
        height: 60rpx;
        border-radius: 50%;
        border: 1px solid #000000;
        .iconfont{
          color: #000000;
          font-size: 26rpx;
        }
      }
      .icon-next{
        width: 46rpx;
        height: 46rpx;
        .iconfont{
          color: #000000;
          font-size: 32rpx;
        }
      }
    }
    .progress{
      width: 100%;
      position: absolute;
      left: 0;
      top: 0;
    }
  }
</style>
